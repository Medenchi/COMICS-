import logging
import os  

from telegram import (
    Update,
    LabeledPrice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
    ContextTypes,
)

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ---
# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±)
BOT_TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ï—Å–ª–∏ –Ω–µ—Ç, –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.
if not BOT_TOKEN or not PAYMENT_PROVIDER_TOKEN:
    raise ValueError(
        "–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã BOT_TOKEN –∏ PAYMENT_PROVIDER_TOKEN. "
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ."
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í ---
PRODUCTS = {
    "digital": {
        "title": "–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã üñºÔ∏è",
        "items": {
            "pack1": {"name": "–ü–∞–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ '–ö–æ—Å–º–æ—Å'", "price": 10},
            "pack2": {"name": "–û–±–æ–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '–ü—Ä–∏—Ä–æ–¥–∞'", "price": 15},
            "pack3": {"name": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä", "price": 25},
        },
    },
    "services": {
        "title": "–£—Å–ª—É–≥–∏ üõ†Ô∏è",
        "items": {
            "consult": {"name": "30-–º–∏–Ω—É—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "price": 100},
            "review": {"name": "–ê—É–¥–∏—Ç –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞", "price": 150},
        },
    },
    "guides": {
        "title": "–ì–∞–π–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ üìö",
        "items": {
            "guide1": {"name": "–ì–∞–π–¥ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –≤ Telegram", "price": 50},
            "guide2": {"name": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞", "price": 75},
        },
    },
    "media": {
        "title": "–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç üéµ",
        "items": {
            "song": {"name": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç—Ä–µ–∫", "price": 30},
            "video": {"name": "–í–∏–¥–µ–æ—É—Ä–æ–∫ –ø–æ –º–æ–Ω—Ç–∞–∂—É", "price": 60},
        },
    },
    "access": {
        "title": "–î–æ—Å—Ç—É–ø—ã üîë",
        "items": {
            "chat": {"name": "–î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç (1 –º–µ—Å)", "price": 200},
            "channel": {"name": "–î–æ—Å—Ç—É–ø –≤ VIP-–∫–∞–Ω–∞–ª (1 –º–µ—Å)", "price": 250},
        },
    },
    "donate": {
        "title": "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ ‚ù§Ô∏è",
        "items": {
            "tip1": {"name": "–ú–∞–ª–µ–Ω—å–∫–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "price": 5},
            "tip2": {"name": "–°—Ä–µ–¥–Ω—è—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "price": 20},
            "tip3": {"name": "–ë–æ–ª—å—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "price": 50},
        },
    },
}

# --- –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = []
    for category_key, category_data in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                category_data["title"], callback_data=f"category:{category_key}"
            )
        ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split(":")
    action = data_parts[0]

    if action == "category":
        category_key = data_parts[1]
        await show_category_items(query, category_key)
    elif action == "item":
        category_key = data_parts[1]
        item_key = data_parts[2]
        await show_item_details(query, category_key, item_key)
    elif action == "buy":
        category_key = data_parts[1]
        item_key = data_parts[2]
        await send_invoice(query, context, category_key, item_key)
    elif action == "back_to_menu":
        await show_main_menu(query)
    elif action == "back_to_category":
        category_key = data_parts[1]
        await show_category_items(query, category_key)

async def show_main_menu(query):
    keyboard = []
    for category_key, category_data in PRODUCTS.items():
        keyboard.append([
            InlineKeyboardButton(
                category_data["title"], callback_data=f"category:{category_key}"
            )
        ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=reply_markup
    )
    
async def show_category_items(query, category_key: str):
    category = PRODUCTS[category_key]
    keyboard = []
    for item_key, item_data in category["items"].items():
        price_in_stars = item_data['price']
        button_text = f"{item_data['name']} ({price_in_stars} ‚≠êÔ∏è)"
        keyboard.append([
            InlineKeyboardButton(
                button_text, callback_data=f"item:{category_key}:{item_key}"
            )
        ])
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: *{category['title']}*",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def show_item_details(query, category_key: str, item_key: str):
    item = PRODUCTS[category_key]["items"][item_key]
    price_in_stars = item['price']
    text = f"–¢–æ–≤–∞—Ä: *{item['name']}*\n\n–¶–µ–Ω–∞: *{price_in_stars}* Telegram Stars ‚≠êÔ∏è"
    keyboard = [
        [InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –∑–∞ {price_in_stars} ‚≠êÔ∏è", callback_data=f"buy:{category_key}:{item_key}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"back_to_category:{category_key}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode="Markdown")

async def send_invoice(query, context: ContextTypes.DEFAULT_TYPE, category_key: str, item_key: str):
    chat_id = query.message.chat.id
    item = PRODUCTS[category_key]["items"][item_key]
    title = item["name"]
    description = f"–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ '{title}' –≤ Telegram Stars"
    payload = f"payload-{chat_id}-{item_key}-{query.id}"
    currency = "XTR"
    price = item["price"]
    prices = [LabeledPrice(label=title, amount=price)]

    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
    )
    await query.delete_message()

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    payment_info = update.message.successful_payment
    currency = payment_info.currency
    total_amount = payment_info.total_amount
    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {total_amount} {currency}")
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ {total_amount} {currency}. "
        "–í–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω."
    )

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
